import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { Task } from '@/models';
import { getTasksAsync, addTaskAsync as dbAddTask, updateTaskStatusAsync as dbUpdateTaskStatus } from '@/database/TaskDAO';

interface TasksState {
  tasks: Task[];
  status: 'idle' | 'loading' | 'succeeded' | 'failed';
  error: string | null;
}

const initialState: TasksState = {
  tasks: [],
  status: 'idle',
  error: null,
};

export const fetchTasks = createAsyncThunk('tasks/fetchTasks', async () => {
    const tasks = await getTasksAsync();
    return tasks;
});

export const addNewTask = createAsyncThunk('tasks/addNewTask', async (newTask: Task) => {
    await dbAddTask(newTask);
    return newTask;
});

export const updateTaskStatus = createAsyncThunk('tasks/updateTaskStatus', async ({ id, status }: { id: string, status: 'Pending' | 'Completed' }) => {
    await dbUpdateTaskStatus(id, status);
    return { id, status };
});

const tasksSlice = createSlice({
  name: 'tasks',
  initialState,
  reducers: {},
  extraReducers: (builder) => {
    builder
        .addCase(fetchTasks.pending, (state) => {
            state.status = 'loading';
        })
        .addCase(fetchTasks.fulfilled, (state, action) => {
            state.status = 'succeeded';
            state.tasks = action.payload;
        })
        .addCase(fetchTasks.rejected, (state, action) => {
            state.status = 'failed';
            state.error = action.error.message || 'Failed to fetch tasks';
        })
        .addCase(addNewTask.fulfilled, (state, action) => {
            state.tasks.push(action.payload);
            state.tasks.sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());
        })
        .addCase(updateTaskStatus.fulfilled, (state, action: PayloadAction<{ id: string, status: 'Pending' | 'Completed' }>) => {
            const index = state.tasks.findIndex((task) => task.id === action.payload.id);
            if (index !== -1) {
                state.tasks[index].status = action.payload.status;
            }
        });
  },
});

export default tasksSlice.reducer;
