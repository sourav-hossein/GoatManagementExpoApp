import React, { useState, useMemo } from 'react';
import { ScrollView, StyleSheet, View } from 'react-native';
import { Button, ActivityIndicator, useTheme, Text } from 'react-native-paper';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useRouter } from 'expo-router';
import { v4 as uuidv4 } from 'uuid';
import { addDays, format } from 'date-fns';

import ControlledInput from '@/components/ControlledInput';
import ControlledDatePicker from '@/components/ControlledDatePicker';
import ControlledSelect from '@/components/ControlledSelect';
import { useAppDispatch, useAppSelector } from '@/store/hooks';
import { addNewBreedingRecord } from '@/store/slices/breedingSlice';
import { BreedingRecord } from '@/models';

const breedingRecordSchema = z.object({
  motherId: z.string().min(1, 'Please select a dam (mother)'),
  fatherId: z.string().min(1, 'Please select a sire (father)'),
  matingDate: z.date({ required_error: 'Mating date is required' }),
  notes: z.string().optional(),
});

const GESTATION_DAYS = 150;

export default function AddBreedingRecordScreen() {
  const { colors } = useTheme();
  const router = useRouter();
  const dispatch = useAppDispatch();
  const { goats } = useAppSelector(state => state.goats);

  const [isSubmitting, setIsSubmitting] = useState(false);

  const { control, handleSubmit, watch } = useForm({
    resolver: zodResolver(breedingRecordSchema),
    defaultValues: {
      motherId: '', fatherId: '', matingDate: new Date(), notes: ''
    },
  });

  const matingDate = watch('matingDate');

  const { damOptions, sireOptions } = useMemo(() => {
    const dams = goats.filter(g => g.gender === 'Female').map(g => ({ label: `${g.name} (${g.tagId})`, value: g.id }));
    const sires = goats.filter(g => g.gender === 'Male').map(g => ({ label: `${g.name} (${g.tagId})`, value: g.id }));
    return { damOptions: dams, sireOptions: sires };
  }, [goats]);

  const expectedDueDate = useMemo(() => {
    if (!matingDate) return null;
    return addDays(matingDate, GESTATION_DAYS);
  }, [matingDate]);

  const onSubmit = async (data: z.infer<typeof breedingRecordSchema>) => {
    if (!expectedDueDate) return;
    setIsSubmitting(true);
    try {
      const newRecord: BreedingRecord = {
        id: uuidv4(),
        ...data,
        matingDate: data.matingDate.toISOString(),
        expectedDueDate: expectedDueDate.toISOString(),
      };
      await dispatch(addNewBreedingRecord(newRecord)).unwrap();
      router.back();
    } catch (error) {
      console.error("Failed to save breeding record", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <ScrollView style={[styles.container, { backgroundColor: colors.background }]} contentContainerStyle={styles.contentContainer}>
      <ControlledSelect control={control} name="motherId" label="Select Dam (Mother)" options={damOptions} disabled={isSubmitting} />
      <ControlledSelect control={control} name="fatherId" label="Select Sire (Father)" options={sireOptions} disabled={isSubmitting} />
      <ControlledDatePicker control={control} name="matingDate" label="Mating Date" disabled={isSubmitting} />
      
      {expectedDueDate && (
        <View style={[styles.dueDateContainer, { backgroundColor: colors.surface }]}>
            <Text style={styles.dueDateLabel}>Expected Due Date:</Text>
            <Text style={[styles.dueDateValue, { color: colors.primary }]}>{format(expectedDueDate, 'MMMM d, yyyy')}</Text>
        </View>
      )}

      <ControlledInput control={control} name="notes" label="Notes" multiline numberOfLines={3} disabled={isSubmitting} />

      <Button mode="contained" onPress={handleSubmit(onSubmit)} style={styles.saveButton} labelStyle={styles.saveButtonText} disabled={isSubmitting}>
        {isSubmitting ? <ActivityIndicator animating={true} color={colors.surface} /> : 'Save Record'}
      </Button>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  contentContainer: { padding: 20 },
  dueDateContainer: {
    padding: 16,
    borderRadius: 8,
    marginVertical: 12,
    alignItems: 'center',
  },
  dueDateLabel: {
    fontFamily: 'Inter_400Regular',
    fontSize: 14,
    color: '#888',
  },
  dueDateValue: {
    fontFamily: 'Inter_700Bold',
    fontSize: 18,
    marginTop: 4,
  },
  saveButton: { marginTop: 16, paddingVertical: 8 },
  saveButtonText: { fontFamily: 'Inter_600SemiBold', fontSize: 16 },
});
