import React, { useState, useMemo, useCallback } from 'react';
import { FlatList, StyleSheet, View, ActivityIndicator, RefreshControl } from 'react-native';
import { FAB, Searchbar, useTheme } from 'react-native-paper';
import { useRouter, useNavigation } from 'expo-router';
import { useAppSelector, useAppDispatch } from '@/store/hooks';
import { GoatListItem } from '@/components/GoatListItem';
import EmptyState from '@/components/EmptyState';
import FilterModal, { SortOption, FilterOptions } from '@/components/FilterModal';
import { fetchGoats } from '@/store/slices/goatsSlice';

export default function GoatsScreen() {
  const { colors } = useTheme();
  const router = useRouter();
  const navigation = useNavigation();
  const dispatch = useAppDispatch();

  const { goats, status } = useAppSelector((state) => state.goats);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterModalVisible, setFilterModalVisible] = useState(false);
  const [sort, setSort] = useState<SortOption>('name-asc');
  const [filters, setFilters] = useState<FilterOptions>({ breeds: [], genders: [] });
  
  const refreshing = status === 'loading';

  const onRefresh = useCallback(() => {
    dispatch(fetchGoats());
  }, [dispatch]);

  React.useEffect(() => {
    navigation.setOptions({
      openFilterModal: () => setFilterModalVisible(true),
    });
  }, [navigation]);

  const sortedAndFilteredGoats = useMemo(() => {
    let result = [...goats];

    // Search
    if (searchQuery) {
      result = result.filter(goat =>
        goat.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
        goat.tagId.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // Filter
    if (filters.breeds.length > 0) {
        result = result.filter(goat => filters.breeds.includes(goat.breed));
    }
    if (filters.genders.length > 0) {
        result = result.filter(goat => filters.genders.includes(goat.gender));
    }

    // Sort
    switch (sort) {
      case 'dob-asc':
        result.sort((a, b) => new Date(b.dateOfBirth).getTime() - new Date(a.dateOfBirth).getTime());
        break;
      case 'dob-desc':
        result.sort((a, b) => new Date(a.dateOfBirth).getTime() - new Date(b.dateOfBirth).getTime());
        break;
      case 'name-asc':
      default:
        result.sort((a, b) => a.name.localeCompare(b.name));
        break;
    }

    return result;
  }, [goats, searchQuery, sort, filters]);

  if (status === 'loading' && goats.length === 0) {
    return (
      <View style={[styles.container, styles.center, { backgroundColor: colors.background }]}>
        <ActivityIndicator animating={true} color={colors.primary} size="large" />
      </View>
    );
  }

  return (
    <View style={[styles.container, { backgroundColor: colors.background }]}>
      <Searchbar
        placeholder="Search by name or tag ID"
        onChangeText={setSearchQuery}
        value={searchQuery}
        style={[styles.searchbar, { backgroundColor: colors.surface }]}
      />
      <FlatList
        data={sortedAndFilteredGoats}
        renderItem={({ item }) => <GoatListItem item={item} />}
        keyExtractor={item => item.id}
        contentContainerStyle={styles.list}
        refreshControl={<RefreshControl refreshing={refreshing} onRefresh={onRefresh} tintColor={colors.primary} />}
        ListEmptyComponent={
          <EmptyState 
            title="No Goats Found"
            message={searchQuery || filters.breeds.length > 0 || filters.genders.length > 0 ? "Try adjusting your search or filters." : "Add your first goat to get started!"} 
          />
        }
      />
      <FAB
        icon="plus"
        style={[styles.fab, { backgroundColor: colors.primary }]}
        onPress={() => router.push('/add-goat')}
        color={colors.surface}
      />
      <FilterModal 
        visible={filterModalVisible}
        onDismiss={() => setFilterModalVisible(false)}
        onApply={(s, f) => { setSort(s); setFilters(f); }}
        goats={goats}
        initialSort={sort}
        initialFilters={filters}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1 },
  center: { justifyContent: 'center', alignItems: 'center' },
  searchbar: { marginHorizontal: 16, marginBottom: 8 },
  list: { paddingHorizontal: 16, paddingBottom: 80, flexGrow: 1 },
  fab: {
    position: 'absolute',
    margin: 16,
    right: 0,
    bottom: 0,
  },
});
